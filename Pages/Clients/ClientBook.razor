@page "/clientBook/{ID}"
@inject IClientsManager articleManager
@inject IBookManager bookManager
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc.Rendering

<h1>
    Client Books
</h1>
<h2>@articleEntity.ClientFullName</h2>

<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <input type="hidden" @bind-value="@articleEntity.ClientId" />
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>
                                Select Books
                                <span class="fa"></span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <div class="overflow-auto multiselect list-group" style="width:600px;height:350px">
                                    <div id="checkboxes">
                                        <div>
                                            <div class="col-md-12" style="text-align:left">
                                                @foreach (var item in this.Items)
                                                {
                                                    <div class="checkbox">
                                                        <label for="@item.Value">
                                                            @if (item.Selected)
                                                            {
                                                                <input type="checkbox" id="@item.Value" checked="checked" @onchange="@((e) => CheckboxChanged(e, item.Value))" />
                                                            }
                                                            else
                                                            {
                                                                <input type="checkbox" id="@item.Value" @onchange="@((e) => CheckboxChanged(e, item.Value))" />
                                                            }
                                                            @item.Text
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="() => UpdateArticle()">Save</button>
                <button type="button" class="btn btn-danger" @onclick="() => cancel()">Cancel</button>
            </div>
        </form>
    </div>
</div>

@code  {

    [Parameter]
    public string ID { get; set; }

    Clients articleEntity = new Clients();
    List<Books> autherLists;


    protected override async Task OnInitializedAsync()
    {
        autherLists = await bookManager.ListAll(0, 1000, "BookName", "ASC", "");
        Items = new MultiSelectList(autherLists, "BookId", "BookName");
        articleEntity = await articleManager.GetById(Convert.ToInt32(ID));
        foreach (var item in Items)
        {
            int val = Int32.Parse(item.Value);
            item.Selected = articleEntity.BookList.Any(x => x.BookId == val);
        }
    }

    [Parameter]
    public MultiSelectList Items { get; set; } = new MultiSelectList(new List<Books>(), "BookId", "BookName");

    private void CheckboxChanged(ChangeEventArgs e, string key)
    {
        var i = this.Items.FirstOrDefault(i => i.Value == key);
        if (i != null)
        {
            i.Selected = (bool)e.Value;
        }
    }

    protected async Task UpdateArticle()
    {
        articleEntity.BookList = new List<Books>();
        foreach (var item1 in Items)
        {
            if (item1.Selected)
            {
                int val = Int32.Parse(item1.Value);
                articleEntity.BookList.Add(autherLists.Where(x => x.BookId == val).First());
            }
        }
        await articleManager.UpdateBook(articleEntity);
        navigationManager.NavigateTo("/clientlist");
    }

    void cancel()
    {
        navigationManager.NavigateTo("/clientlist");
    }
}
